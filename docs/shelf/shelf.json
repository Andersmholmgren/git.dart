{"name":"shelf","qualifiedName":"shelf/shelf","comment":"","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"logRequests":{"name":"logRequests","qualifiedName":"shelf/shelf.logRequests","comment":"<p>Middleware which prints the time of the request, the elapsed time for the\ninner handlers, the response's status code and the request URI.</p>\n<p><a>shelf/shelf.logRequests.logger</a> takes two paramaters.</p>\n<p><code>msg</code> includes the request time, duration, request method, and requested\npath.</p>\n<p>For successful requests, <code>msg</code> also includes the status code.</p>\n<p>When an error is thrown, <code>isError</code> is true and <code>msg</code> contains the error\ndescription and stack trace.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"shelf/shelf.Middleware","inner":[]}],"parameters":{"logger":{"name":"logger","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"createMiddleware":{"name":"createMiddleware","qualifiedName":"shelf/shelf.createMiddleware","comment":"<p>Creates a <a>shelf/shelf.Middleware</a> using the provided functions.</p>\n<p>If provided, <a>shelf/shelf.createMiddleware.requestHandler</a> receives a <a>shelf/shelf.Request</a>. It can respond to\nthe request by returning a <a>shelf/shelf.Response</a> or Future&lt;Response>.\n<a>shelf/shelf.createMiddleware.requestHandler</a> can also return <code>null</code> for some or all requests in which\ncase the request is sent to the inner <a>shelf/shelf.Handler</a>.</p>\n<p>If provided, <a>shelf/shelf.createMiddleware.responseHandler</a> is called with the <a>shelf/shelf.Response</a> generated\nby the inner <a>shelf/shelf.Handler</a>. Responses generated by <a>shelf/shelf.createMiddleware.requestHandler</a> are not\nsent to <a>shelf/shelf.createMiddleware.responseHandler</a>.</p>\n<p><a>shelf/shelf.createMiddleware.responseHandler</a> should return either a <a>shelf/shelf.Response</a> or\nFuture&lt;Response>. It may return the response parameter it receives or\ncreate a new response object.</p>\n<p>If provided, <a>shelf/shelf.createMiddleware.errorHandler</a> receives errors thrown by the inner handler. It\ndoes not receive errors thrown by <a>shelf/shelf.createMiddleware.requestHandler</a> or <a>shelf/shelf.createMiddleware.responseHandler</a>. It\ncan either return a new response or throw an error.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"shelf/shelf.Middleware","inner":[]}],"parameters":{"requestHandler":{"name":"requestHandler","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]},"responseHandler":{"name":"responseHandler","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]},"errorHandler":{"name":"errorHandler","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"Request","qualifiedName":"shelf/shelf.Request","preview":"<p>Represents an HTTP request to be processed by a Shelf application.</p>"},{"name":"Response","qualifiedName":"shelf/shelf.Response","preview":"<p>The response returned by a Handler.</p>"},{"name":"Stack","qualifiedName":"shelf/shelf.Stack","preview":"<p>A helper that makes it easy to compose a set of <a>shelf/shelf.Middleware</a> and a\n<a>shelf/shelf.Handler</a>.</p>"}],"typedef":{"Middleware":{"name":"Middleware","qualifiedName":"shelf/shelf.Middleware","comment":"<p>A function which creates a new [Handler] by wrapping a [Handler].</p>\n<p>You can extend the functions of a [Handler] by wrapping it in\n[Middleware] that can intercept and process a request before it it sent\nto a handler, a response after it is sent by a handler, or both.</p>\n<p>Because [Middleware] consumes a [Handler] and returns a new\n[Handler], multiple [Middleware] instances can be composed\ntogether to offer rich functionality.</p>\n<p>Common uses for middleware include caching, logging, and authentication.</p>\n<p>A simple [Middleware] can be created using [createMiddleware].</p>","return":"shelf-typedef.Handler","parameters":{"innerHandler":{"name":"innerHandler","optional":false,"named":false,"default":false,"type":[{"outer":"shelf/shelf.Handler","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{},"preview":"<p>A function which creates a new [Handler] by wrapping a [Handler].</p>"},"Handler":{"name":"Handler","qualifiedName":"shelf/shelf.Handler","comment":"<p>The signature of a function which handles a [Request].</p>\n<p>A [Handler] may receive a request directly from an HTTP server or it\nmay be composed as part of a larger application.</p>\n<p>Should return [Response] or [Future<Response>].</p>","return":"dynamic","parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"shelf/shelf.Request","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{},"preview":"<p>The signature of a function which handles a [Request].</p>"}},"error":[]},"packageName":"shelf","packageIntro":"<h2>Web Server Middleware for Dart</h2>\n<h2>Introduction</h2>\n<p><strong>Shelf</strong> makes it easy to create and compose <strong>web servers</strong> and <strong>parts of web\nservers</strong>. How?</p><ul><li>Expose a small set of simple types.</li><li>\n<p>Map server logic into a simple function: a single argument for the request,\nthe response is the return value.</p></li><li>Trivially mix and match synchronous and asynchronous processing.</li><li>Flexibliity to return a simple string or a byte stream with the same model.</li></ul>\n<h2>Example</h2>\n<p>See <code>example/example_server.dart</code></p>\n<pre class=\"dart\"><code>import 'package:shelf/shelf.dart' as shelf;\nimport 'package:shelf/shelf_io.dart' as io;\n\nvoid main() {\n  var handler = const shelf.Stack().addMiddleware(shelf.logRequests())\n      .addHandler(_echoRequest);\n\n  io.serve(handler, 'localhost', 8080).then((server) {\n    print('Serving at http://${server.address.host}:${server.port}');\n  });\n}\n\nshelf.Response _echoRequest(shelf.Request request) {\n  return new shelf.Response.ok('Request for \"${request.url}\"');\n}\n</code></pre>\n<h2>Inspiration</h2><ul><li>\n<p><a href=\"http://www.senchalabs.org/connect/\">Connect</a> for NodeJS.\n* Read <a href=\"http://howtonode.org/connect-it\">this great write-up</a> to understand\n  the overall philosophy of all of these models.</p></li><li><a href=\"http://rack.github.io/\">Rack</a> for Ruby.</li><li><a href=\"http://legacy.python.org/dev/peps/pep-3333/\">WSGI</a> for Python.</li></ul>"}