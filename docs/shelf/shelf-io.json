{"name":"shelf-io","qualifiedName":"shelf/shelf-io","comment":"<p>A Shelf adapter for handling <a>shelf/dart-io.HttpRequest</a> objects from <code>dart:io</code>.</p>\n<p>One can provide an instance of <a>shelf/dart-io.HttpServer</a> as the <code>requests</code> parameter in\n<a>shelf/shelf-io.serveRequests</a>.</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"handleRequest":{"name":"handleRequest","qualifiedName":"shelf/shelf-io.handleRequest","comment":"<p>Uses <a>shelf/shelf-io.handleRequest.handler</a> to handle <a>shelf/shelf-io.handleRequest.request</a>.</p>\n<p>Returns a <a>shelf/dart-async.Future</a> which completes when the request has been handled.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"request":{"name":"request","optional":false,"named":false,"default":false,"type":[{"outer":"dart-io.HttpRequest","inner":[]}],"value":"null","annotations":[]},"handler":{"name":"handler","optional":false,"named":false,"default":false,"type":[{"outer":"shelf/shelf-typedef.Handler","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"serveRequests":{"name":"serveRequests","qualifiedName":"shelf/shelf-io.serveRequests","comment":"<p>Serve a <a>shelf/dart-async.Stream</a> of <a>shelf/dart-io.HttpRequest</a>s.</p>\n<p><a>shelf/dart-io.HttpServer</a> implements Stream&lt;HttpRequest> so it can be passed directly\nto <a>shelf/shelf-io.serveRequests</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"requests":{"name":"requests","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-io.HttpRequest","inner":[]}]}],"value":"null","annotations":[]},"handler":{"name":"handler","optional":false,"named":false,"default":false,"type":[{"outer":"shelf/shelf-typedef.Handler","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"serve":{"name":"serve","qualifiedName":"shelf/shelf-io.serve","comment":"<p>Starts an <a>shelf/dart-io.HttpServer</a> that listens on the specified <a>shelf/shelf-io.serve.address</a> and\n<a>shelf/shelf-io.serve.port</a> and sends requests to <a>shelf/shelf-io.serve.handler</a>.</p>\n<p>See the documentation for <a>shelf/dart-io.HttpServer.bind</a> for more details on <a>shelf/shelf-io.serve.address</a>,\n<a>shelf/shelf-io.serve.port</a>, and <a>shelf/shelf-io.serve.backlog</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-io.HttpServer","inner":[]}]}],"parameters":{"handler":{"name":"handler","optional":false,"named":false,"default":false,"type":[{"outer":"shelf/shelf-typedef.Handler","inner":[]}],"value":"null","annotations":[]},"address":{"name":"address","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"port":{"name":"port","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"backlog":{"name":"backlog","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"classes":{"class":[],"typedef":{},"error":[]},"packageName":"shelf","packageIntro":"<h2>Web Server Middleware for Dart</h2>\n<h2>Introduction</h2>\n<p><strong>Shelf</strong> makes it easy to create and compose <strong>web servers</strong> and <strong>parts of web\nservers</strong>. How?</p><ul><li>Expose a small set of simple types.</li><li>\n<p>Map server logic into a simple function: a single argument for the request,\nthe response is the return value.</p></li><li>Trivially mix and match synchronous and asynchronous processing.</li><li>Flexibliity to return a simple string or a byte stream with the same model.</li></ul>\n<h2>Example</h2>\n<p>See <code>example/example_server.dart</code></p>\n<pre class=\"dart\"><code>import 'package:shelf/shelf.dart' as shelf;\nimport 'package:shelf/shelf_io.dart' as io;\n\nvoid main() {\n  var handler = const shelf.Stack().addMiddleware(shelf.logRequests())\n      .addHandler(_echoRequest);\n\n  io.serve(handler, 'localhost', 8080).then((server) {\n    print('Serving at http://${server.address.host}:${server.port}');\n  });\n}\n\nshelf.Response _echoRequest(shelf.Request request) {\n  return new shelf.Response.ok('Request for \"${request.url}\"');\n}\n</code></pre>\n<h2>Inspiration</h2><ul><li>\n<p><a href=\"http://www.senchalabs.org/connect/\">Connect</a> for NodeJS.\n* Read <a href=\"http://howtonode.org/connect-it\">this great write-up</a> to understand\n  the overall philosophy of all of these models.</p></li><li><a href=\"http://rack.github.io/\">Rack</a> for Ruby.</li><li><a href=\"http://legacy.python.org/dev/peps/pep-3333/\">WSGI</a> for Python.</li></ul>"}